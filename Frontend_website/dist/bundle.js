/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./scripts/index.js":
/*!**************************!*\
  !*** ./scripts/index.js ***!
  \**************************/
/***/ (() => {

eval("\r\nconsole.log('API_KEY:', \"AIzaSyB-QqdZO0t2F0_TcXzkB_f0idQt5CcI1cs\");\r\nconsole.log('AUTH_DOMAIN:', \"enose-addgroup.firebaseapp.com\");\r\nconsole.log('DATABASE_URL:', \"https://enose-addgroup-default-rtdb.europe-west1.firebasedatabase.app\");\r\nconsole.log('PROJECT_ID:', \"enose-addgroup\");\r\nconsole.log('STORAGE_BUCKET:', \"enose-addgroup.appspot.com\");\r\nconsole.log('MESSAGING_SENDER_ID:', \"153310350641\");\r\nconsole.log('APP_ID:', \"1:153310350641:web:7b82fa4ae1c89a29d87410\");\r\nconsole.log('MEASUREMENT_ID:', \"G-G6EEN8WVZL\");\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyB-QqdZO0t2F0_TcXzkB_f0idQt5CcI1cs\", \r\n  authDomain: \"enose-addgroup.firebaseapp.com\",\r\n  databaseURL: \"https://enose-addgroup-default-rtdb.europe-west1.firebasedatabase.app\",\r\n  projectId: \"enose-addgroup\",\r\n  storageBucket: \"enose-addgroup.appspot.com\",\r\n  messagingSenderId: \"153310350641\",\r\n  appId: \"1:153310350641:web:7b82fa4ae1c89a29d87410\",\r\n  measurementId: \"G-G6EEN8WVZL\",\r\n};\r\n\r\n// Initialize firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// Make auth and database references\r\nconst auth = firebase.auth();\r\nconst db = firebase.database();\r\n\r\n\r\n/*-----------------------------------------------------------------------------------authentication -------------------------------------------------------------------*/\r\n\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function(){\r\n    // listen for auth status changes\r\n    auth.onAuthStateChanged(user => {\r\n        if (user) {\r\n          console.log(\"user logged in\");\r\n          console.log(user);\r\n          setupUI(user);\r\n          var uid = user.uid;\r\n          console.log(uid);\r\n        } else {\r\n          console.log(\"user logged out\");\r\n          setupUI();\r\n        }\r\n    });\r\n\r\n    // login\r\n    const loginForm = document.querySelector('#login-form');\r\n    loginForm.addEventListener('submit', (e) => {\r\n        e.preventDefault();\r\n        // get user info\r\n        const email = loginForm['input-email'].value;\r\n        const password = loginForm['input-password'].value;\r\n        // log the user in\r\n        auth.signInWithEmailAndPassword(email, password).then((cred) => {\r\n            // close the login modal & reset form\r\n            loginForm.reset();\r\n            console.log(email);\r\n        })\r\n        .catch((error) =>{\r\n            const errorCode = error.code;\r\n            const errorMessage = error.message;\r\n            document.getElementById(\"error-message\").innerHTML = errorMessage;\r\n            console.log(errorMessage);\r\n        });\r\n    });\r\n\r\n    // logout\r\n    const logout = document.querySelector('#logout-link');\r\n    logout.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        auth.signOut();\r\n    });\r\n});\r\n\r\n/*-----------------------------------------------------------------------------------table and chart -------------------------------------------------------------------*/\r\n\r\n// global stdNo\r\nvar stdNo = 0;\r\n\r\n// convert epochtime to JavaScripte Date object\r\nfunction epochToJsDate(epochTime){\r\n  return new Date(epochTime*1000);\r\n}\r\n\r\n// convert time to human-readable format YYYY/MM/DD HH:MM:SS\r\nfunction epochToDateTime(epochTime){\r\n  var epochDate = new Date(epochToJsDate(epochTime));\r\n  var dateTime = epochDate.getFullYear() + \"/\" +\r\n    (\"00\" + (epochDate.getMonth() + 1)).slice(-2) + \"/\" +\r\n    (\"00\" + epochDate.getDate()).slice(-2) + \"\\n\" +\r\n    (\"00\" + epochDate.getHours()).slice(-2) + \":\" +\r\n    (\"00\" + epochDate.getMinutes()).slice(-2) + \":\" +\r\n    (\"00\" + epochDate.getSeconds()).slice(-2);\r\n\r\n  return dateTime;\r\n}\r\n\r\n\r\n\r\n// function to plot values on charts\r\nfunction plotValues(chart, timestamp, value){\r\n   var keys = Object.keys(value);\r\n  console.log(keys);\r\n  console.log(keys.length);\r\n\r\n    for (var i = 0; i < keys.length; i++){\r\n     var x = epochToJsDate(timestamp).getTime();\r\n    console.log(x);\r\n    // const key = keys[i];\r\n     const key = keys[i];\r\n     var y = Number (value[key]);\r\n    console.log(y);\r\n\r\n    if(chart.series[i].data.length > 40) {\r\n      chart.series[i].addPoint([x, y], true, true, true);\r\n    } else {\r\n      chart.series[i].addPoint([x, y], true, false, true);\r\n    }\r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// DOM elements\r\nconst loginElement = document.querySelector('#login-form');\r\nconst contentElement = document.querySelector(\"#content-sign-in\");\r\nconst userDetailsElement = document.querySelector('#user-details');\r\nconst authBarElement = document.querySelector('#authentication-bar');\r\nconst deleteButtonElement = document.getElementById('delete-button');\r\nconst deleteModalElement = document.getElementById('delete-modal');\r\nconst deleteDataFormElement = document.querySelector('#delete-data-form');\r\nconst viewDataButtonElement = document.getElementById('view-data-button');\r\nconst hideDataButtonElement = document.getElementById('hide-data-button');\r\nconst tableContainerElement = document.querySelector('#table-container');\r\nconst chartsRangeInputElement = document.getElementById('charts-range');\r\nconst loadDataButtonElement = document.getElementById('load-data');\r\nconst cardsCheckboxElement = document.querySelector('input[name=cards-checkbox]');\r\n// const gaugesCheckboxElement = document.querySelector('input[name=gauges-checkbox]');\r\nconst chartsCheckboxElement = document.querySelector('input[name=charts-checkbox]');\r\n\r\n// DOM elements for sensor readings\r\nconst cardsReadingsElement = document.querySelector(\"#cards-div\");\r\nconst chartsDivElement = document.querySelector('#charts-div');\r\n// MQ2 gases\r\nconst MQ2_alcElement = document.getElementById(\"MQ2_alc\");\r\nconst MQ2_coElement = document.getElementById(\"MQ2_co\");\r\nconst MQ2_h2Element = document.getElementById(\"MQ2_h2\");\r\nconst MQ2_lpgElement = document.getElementById(\"MQ2_lpg\");\r\nconst MQ2_propElement = document.getElementById(\"MQ2_prop\");\r\n// MQ3 gases\r\nconst MQ3_alcElement = document.getElementById(\"MQ3_alc\");\r\nconst MQ3_benElement = document.getElementById(\"MQ3_ben\");\r\nconst MQ3_ch4Element = document.getElementById(\"MQ3_ch4\");\r\nconst MQ3_coElement = document.getElementById(\"MQ3_co\");\r\nconst MQ3_hexElement = document.getElementById(\"MQ3_hex\");\r\nconst MQ3_lpgElement = document.getElementById(\"MQ3_lpg\");\r\n// MQ136 gases\r\nconst MQ136_coElement = document.getElementById(\"MQ136_co\");\r\nconst MQ136_h2sElement = document.getElementById(\"MQ136_h2s\");\r\nconst MQ136_nh4Element = document.getElementById(\"MQ136_nh4\");\r\n\r\n\r\nconst updateElement = document.getElementById(\"lastUpdate\")\r\n\r\n// MANAGE LOGIN/LOGOUT UI\r\nconst setupUI = (user) => {\r\n  if (user) {\r\n    //toggle UI elements\r\n    loginElement.style.display = 'none';\r\n    contentElement.style.display = 'block';\r\n    authBarElement.style.display = 'block';\r\n    userDetailsElement.style.display = 'block';\r\n    userDetailsElement.innerHTML = user.email;\r\n\r\n    // get user UID to get data from database\r\n    var uid = user.uid;\r\n    console.log(uid);\r\n\r\n    // Database paths (with user UID)\r\n    var dbPath = 'UsersData/' + uid.toString() + '/readings';\r\n    var chartPath = 'UsersData/' + uid.toString() + '/charts/range';\r\n\r\n    // Database references\r\n    var dbRef = firebase.database().ref(dbPath);\r\n    var chartRef = firebase.database().ref(chartPath);\r\n\r\n    // CHARTS\r\n    // Number of readings to plot on charts\r\n    var chartRange = 0;\r\n    // Get number of readings to plot saved on database (runs when the page first loads and whenever there's a change in the database)\r\n    chartRef.on('value', snapshot => {\r\n      chartRange = Number(snapshot.val());\r\n      console.log(chartRange);\r\n      // Delete all data from charts\r\n      // to update with new values when a new range is selected\r\n      chartT.destroy();\r\n  \r\n      // Render new charts to display new range of data\r\n      chartT = createTemperatureChart();\r\n     \r\n      // Update the charts with the new range\r\n      // Get the latest readings and plot them on charts (the number of plotted readings corresponds to the chartRange value)\r\n      dbRef.orderByKey().limitToLast(chartRange).on('child_added', snapshot => {\r\n        var jsonData = snapshot.toJSON(); // example: {Alc: 25.02, humidity: 50.20, pressure: 1008.48, timestamp:1641317355}\r\n        // Save values on variables\r\n        var timestamp = jsonData.timestamp;\r\n        // Plot the values on the charts\r\n        plotValues(chartT, timestamp, jsonData);\r\n      });\r\n    });\r\n\r\n    // Update database with new range (input field)\r\n    chartsRangeInputElement.onchange = () => {\r\n      chartRef.set(chartsRangeInputElement.value);\r\n    };\r\n\r\n    //CHECKBOXES\r\n    // Checbox (cards for sensor readings)\r\n    cardsCheckboxElement.addEventListener('change', (e) => {\r\n      if (cardsCheckboxElement.checked) {\r\n        cardsReadingsElement.style.display = 'block';\r\n      }\r\n      else {\r\n        cardsReadingsElement.style.display = 'none';\r\n      }\r\n    });\r\n\r\n      // Checbox (charts for sensor readings)\r\n    chartsCheckboxElement.addEventListener('change', (e) =>{\r\n      if (chartsCheckboxElement.checked) {\r\n        chartsDivElement.style.display = 'block';\r\n      }\r\n      else{\r\n        chartsDivElement.style.display = 'none';\r\n      }\r\n    });\r\n    \r\n\r\n    // CARDS\r\n    // Get the latest readings and display on cards\r\n    dbRef.orderByKey().limitToLast(1).on('child_added', snapshot => {\r\n      var jsonData = snapshot.toJSON(); // example: {temperature: 25.02, humidity: 50.20, pressure: 1008.48, timestamp:1641317355}\r\n      // MQ2\r\n      var MQ2_Alc = jsonData.MQ2_Alc;\r\n      var MQ2_CO = jsonData.MQ2_CO;\r\n      var MQ2_H2 = jsonData.MQ2_H2;\r\n      var MQ2_LPG = jsonData.MQ2_LPG;\r\n      var MQ2_Prop = jsonData.MQ2_Prop;\r\n\r\n      // MQ3 \r\n      var MQ3_Alc = jsonData.MQ3_Alc;\r\n      var MQ3_Ben = jsonData.MQ3_Ben;\r\n      var MQ3_CH4 = jsonData.MQ3_CH4;\r\n      var MQ3_CO = jsonData.MQ3_CO;\r\n      var MQ3_Hex = jsonData.MQ3_Hex;\r\n      var MQ3_LPG = jsonData.MQ3_LPG;\r\n\r\n      // MQ136\r\n      var MQ136_CO = jsonData.MQ136_CO;\r\n      var MQ136_H2S = jsonData.MQ136_H2S;\r\n      var MQ136_NH4 = jsonData.MQ136_NH4;\r\n\r\n      var timestamp = jsonData.timestamp;\r\n      // Update DOM elements\r\n      MQ2_alcElement.innerHTML = MQ2_Alc;\r\n      MQ2_coElement.innerHTML = MQ2_CO;\r\n      MQ2_h2Element.innerText = MQ2_H2;\r\n      MQ2_lpgElement.innerText = MQ2_LPG;\r\n      MQ2_propElement.innerText = MQ2_Prop;\r\n\r\n      // MQ3\r\n      MQ3_alcElement.innerText = MQ3_Alc;\r\n      MQ3_benElement.innerHTML = MQ3_Ben;\r\n      MQ3_ch4Element.innerHTML = MQ3_CH4;\r\n      MQ3_coElement.innerHTML= MQ3_CO;\r\n      MQ3_hexElement.innerHTML = MQ3_Hex; \r\n      MQ3_lpgElement.innerHTML = MQ3_LPG;\r\n      \r\n      // MQ136\r\n      MQ136_coElement.innerHTML = MQ136_CO;\r\n      MQ136_h2sElement.innerHTML = MQ136_H2S;\r\n      MQ136_nh4Element.innerHTML = MQ136_NH4;\r\n  \r\n\r\n      updateElement.innerHTML = epochToDateTime(timestamp);\r\n    });\r\n\r\n   \r\n\r\n    // DELETE DATA\r\n    // Add event listener to open modal when click on \"Delete Data\" button\r\n    deleteButtonElement.addEventListener('click', e =>{\r\n      console.log(\"Remove data\");\r\n      e.preventDefault;\r\n      deleteModalElement.style.display=\"block\";\r\n    });\r\n\r\n    // Add event listener when delete form is submited\r\n    deleteDataFormElement.addEventListener('submit', (e) => {\r\n      // delete data (readings)\r\n      dbRef.remove();\r\n    });\r\n\r\n    // TABLE\r\n    var lastReadingTimestamp; //saves last timestamp displayed on the table\r\n    // Function that creates the table with the first 100 readings\r\n    function createTable(){\r\n      // append all data to the table\r\n      var firstRun = true;\r\n\r\n      dbRef.orderByKey().limitToLast(100).on('child_added', function(snapshot) {\r\n        if (snapshot.exists()) {\r\n          var jsonData = snapshot.toJSON();\r\n          console.log(jsonData);\r\n          // MQ2\r\n          var MQ2_Alc = jsonData.MQ2_Alc;\r\n          var MQ2_CO = jsonData.MQ2_CO;\r\n          var MQ2_H2 = jsonData.MQ2_H2;\r\n          var MQ2_LPG = jsonData.MQ2_LPG;\r\n          var MQ2_Prop = jsonData.MQ2_Prop;\r\n          // MQ3 \r\n          var MQ3_Alc = jsonData.MQ3_Alc;\r\n          var MQ3_Ben = jsonData.MQ3_Ben;\r\n          var MQ3_CH4 = jsonData.MQ3_CH4;\r\n          var MQ3_CO = jsonData.MQ3_CO;\r\n          var MQ3_Hex = jsonData.MQ3_Hex;\r\n          var MQ3_LPG = jsonData.MQ3_LPG;\r\n          // MQ136\r\n          var MQ136_CO = jsonData.MQ136_CO;\r\n          var MQ136_H2S = jsonData.MQ136_H2S;\r\n          var MQ136_NH4 = jsonData.MQ136_NH4;\r\n          var timestamp = jsonData.timestamp;\r\n          var content = '';\r\n          content += '<tr>';\r\n          // content += '<td>' + ++stdNo + '</td>';\r\n          content += '<td>' + epochToDateTime(timestamp) + '</td>';\r\n          content += '<td>' + MQ2_Alc + '</td>';\r\n          content += '<td>' + MQ2_CO + '</td>';\r\n          content += '<td>' + MQ2_H2 + '</td>';\r\n          content += '<td>' + MQ2_LPG + '</td>';\r\n          content += '<td>' + MQ2_Prop + '</td>';\r\n          content += '<td>' + MQ3_Alc + '</td>';\r\n          content += '<td>' + MQ3_Ben + '</td>';\r\n          content += '<td>' + MQ3_CH4 + '</td>';\r\n          content += '<td>' + MQ3_CO + '</td>';\r\n          content += '<td>' + MQ3_Hex + '</td>';\r\n          content += '<td>' + MQ3_LPG + '</td>';\r\n          content += '<td>' + MQ136_CO + '</td>';\r\n          content += '<td>' + MQ136_H2S + '</td>';\r\n          content += '<td>' + MQ136_NH4 + '</td>';\r\n          content += '</tr>';\r\n          $('#tbody').prepend(content);\r\n          // Save lastReadingTimestamp --> corresponds to the first timestamp on the returned snapshot data\r\n          if (firstRun){\r\n            lastReadingTimestamp = timestamp;\r\n            firstRun=false;\r\n            console.log(lastReadingTimestamp);\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    // append readings to table (after pressing More results... button)\r\n    function appendToTable(){\r\n      var dataList = []; // saves list of readings returned by the snapshot (oldest-->newest)\r\n      var reversedList = []; // the same as previous, but reversed (newest--> oldest)\r\n      console.log(\"APEND\");\r\n      dbRef.orderByKey().limitToLast(100).endAt(lastReadingTimestamp).once('value', function(snapshot) {\r\n        // convert the snapshot to JSON\r\n        if (snapshot.exists()) {\r\n          snapshot.forEach(element => {\r\n            var jsonData = element.toJSON();\r\n            dataList.push(jsonData); // create a list with all data\r\n          });\r\n          lastReadingTimestamp = dataList[0].timestamp; //oldest timestamp corresponds to the first on the list (oldest --> newest)\r\n          reversedList = dataList.reverse(); // reverse the order of the list (newest data --> oldest data)\r\n\r\n          var firstTime = true;\r\n          // loop through all elements of the list and append to table (newest elements first)\r\n          reversedList.forEach(element =>{\r\n            if (firstTime){ // ignore first reading (it's already on the table from the previous query)\r\n              firstTime = false;\r\n            }\r\n            else {\r\n              // MQ2\r\n              var MQ2_Alc = element.MQ2_Alc;\r\n              var MQ2_CO = element.MQ2_CO;\r\n              var MQ2_H2 = element.MQ2_H2;\r\n              var MQ2_LPG = element.MQ2_LPG;\r\n              var MQ2_Prop = element.MQ2_Prop;\r\n              // MQ3 \r\n              var MQ3_Alc = jsonData.MQ3_Alc;\r\n              var MQ3_Ben = jsonData.MQ3_Ben;\r\n              var MQ3_CH4 = jsonData.MQ3_CH4;\r\n              var MQ3_CO = jsonData.MQ3_CO;\r\n              var MQ3_Hex = jsonData.MQ3_Hex;\r\n              var MQ3_LPG = jsonData.MQ3_LPG;\r\n              // MQ136\r\n              var MQ136_CO = jsonData.MQ136_CO;\r\n              var MQ136_H2S = jsonData.MQ136_H2S;\r\n              var MQ136_NH4 = jsonData.MQ136_NH4;\r\n\r\n              var timestamp = element.timestamp;\r\n              var content = '';\r\n              content += '<tr>';\r\n              // content += '<td>' + ++stdNo + '</td>';\r\n              content += '<td>' + epochToDateTime(timestamp) + '</td>';\r\n              content += '<td>' + MQ2_Alc + '</td>';\r\n              content += '<td>' + MQ2_CO + '</td>';\r\n              content += '<td>' + MQ2_H2 + '</td>';\r\n              content += '<td>' + MQ2_LPG + '</td>';\r\n              content += '<td>' + MQ2_Prop + '</td>';\r\n              content += '<td>' + MQ3_Alc + '</td>';\r\n              content += '<td>' + MQ3_Ben + '</td>';\r\n              content += '<td>' + MQ3_CH4 + '</td>';\r\n              content += '<td>' + MQ3_CO + '</td>';\r\n              content += '<td>' + MQ3_Hex + '</td>';\r\n              content += '<td>' + MQ3_LPG + '</td>';\r\n              content += '<td>' + MQ136_CO + '</td>';\r\n              content += '<td>' + MQ136_H2S + '</td>';\r\n              content += '<td>' + MQ136_NH4 + '</td>';\r\n              content += '</tr>';\r\n              $('#tbody').append(content);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    viewDataButtonElement.addEventListener('click', (e) =>{\r\n      // Toggle DOM elements\r\n      tableContainerElement.style.display = 'block';\r\n      viewDataButtonElement.style.display ='none';\r\n      hideDataButtonElement.style.display ='inline-block';\r\n      loadDataButtonElement.style.display = 'inline-block'\r\n      createTable();\r\n    });\r\n\r\n    loadDataButtonElement.addEventListener('click', (e) => {\r\n      appendToTable();\r\n    });\r\n\r\n    hideDataButtonElement.addEventListener('click', (e) => {\r\n      tableContainerElement.style.display = 'none';\r\n      viewDataButtonElement.style.display = 'inline-block';\r\n      hideDataButtonElement.style.display = 'none';\r\n    });\r\n\r\n  // IF USER IS LOGGED OUT\r\n  } else{\r\n    // toggle UI elements\r\n    loginElement.style.display = 'block';\r\n    authBarElement.style.display ='none';\r\n    userDetailsElement.style.display ='none';\r\n    contentElement.style.display = 'none';\r\n  }\r\n}\n\n//# sourceURL=webpack://frontend_website/./scripts/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./scripts/index.js"]();
/******/ 	
/******/ })()
;